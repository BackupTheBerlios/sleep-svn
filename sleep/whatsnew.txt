2.1-beta 6  (1 Oct 06)
===========
- added named parameters for Sleep closures.  When a $key => value argument is
  passed to a sleep closure the value will be installed into the local scope of
  the function as variable $key.  This breaks the old behavior which was to 
  convert the key/value pair into a string i.e. $key=value
- improved function call traceing to detect when a function call failed and to
  indicate that such an event occured.
- coroutines are now allowed to call themselves in a recursive manner
- when yield is called, the local variable state is preserved until the 
  coroutine is called again (only when the coroutine is reset, i.e. exited w/o
  a yield is the local variable state dropped).
- added an error check for attempts to pack odd length hex strings
- parser now throws an error if a jar file specified with import * from: is not
  found.
- added a &setField(class|$object, "field", value) function for setting the 
  value of a field in a Java class or object.
- added &setf('&function', { closure }) for setting a named closure (i.e. a 
  subroutine).
- closure this scope is now associated directly with the closure itself and not
  just its script environment.  the implication of this is passing a closure
  to a fork will carry the closure this scope with it as well (and also the
  local scope in the case of a partially executed coroutine).
- added semaphore synchronization primitive to the sleep language:

  # initialize a semaphore
  $semaphore = semaphore([initial count]);

  # acquire the semaphore
  acquire($semaphore);

  # release the semaphore
  release($semaphore);

2.1-beta 5  (17 Sept 06)
===========
- fixed a bug with import [path] from: [jar] not working when a package.class
  combination was specified.
- fixed a bug where HOES was not recognizing sleep arrays as a valid argument
  for methods/constructs expecting multidimensional arrays.
- HOES mapping scalars to Java arguments is now a little bit stricter and more 
  accurate.
- added &casti(value, "t") to cast the specified value into a Java primitive type.
- altered the semtantics for how Java Object values are converted to Sleep
  scalar number values.  Essentially the Object is converted to a string and the
  string is parsed with the following meaning:
  <not a number> = 0
  "true"         = 1
  "false"        = 0
  ""             = 0
  <a number>     = <a number>

  The old semantics (object hashcode) were worthless so I doubt there will be 
  many complaints.
- added checksumming capability to sleep, the function has the following forms:

  $summer   = checksum($handle, "[[>]CRC32"|"[>]Adler32");
  $sumvalue = checksum($summer); # when I/O on $handle is complete
  or:
  $sumvalue = checksum("string of data", ["CRC32"|"Adler32"])

  The CRC32 and Adler32 algorithms are supported.  With an I/O handle specifying
  a > before the algorithm name indicates that written data should be checksummed.
- added digest capability to sleep, the function is similar to checksum except
  the function name is &digest.  The MD5 and SHA-1 algorithms are supported.
  This function returns a string of bytes (can be converted to hex using 
  unpack("H*", $digest_data)[0]).
- added H/h to the binary format templates to allow byte data to be converted
  to/from hex characters.  The H puts the high nybble first and the h puts the
  low nybble first.
- fixed a bug with &pack destroying the binary string thanks to Java's lack
  of unsigned types.
- When a Java byte array is returned by a HOES call, a sleep byte string will 
  be created from this value.
- fixed a deadlock issue with fork/wait with close being called on fork while
  in the middle of a read.
- sleep I/O now uses the IOObject stored in the environment under %console% as
  the source for stdin/stdout (this is set to System.in and System.out by 
  default).

2.1-beta 4  (11 Sept 06)
===========
- added a literal form for arrays and hashes:
  @("a", "b", "c", "d", "e", @("f", "g", "h", "i"), "j", "k")
  %(a => "apple", b => "batman", c => "cow")
- fixed a bug in the Sleep parser transforming long/int literals
  into ObjectValues rather than LongValue/IntValue.
- string form of arrays and hashes (when converted to a string) is now 
  consistent with the sleep literal form
- added another debug level (8) for function call tracing.  while this
  flag is set all function calls with their arguments and return value
  will be displayed to the user as a runtime warning.  Enable with:
  debug(debug() & 8);
- HOES will now allow sleep data structures (arrays and hashes) to be passed
  as java.util.List and java.util.Map data structures (via an expensive
  conversion process).  This conversion only applies one way i.e. a Java List
  or Java Map can not be used as a Sleep array or hash.
- added the ability to import classes from external jar files into sleep:
  import org.jdom.* from: jdom.jar;
  
  Sleep also has a concept of a Sleep classpath, definable with sleep.classpath
  or through the static methods in sleep.parser.ParserConfig.
- updated the use() function to use the sleep classpath to search for the
  specified jar file.
- fixed lambda({}, $x => $y) sharing scalar container references (caused a 
  change to $x inside of the closure to affect the value of $y)

2.1-beta 3  (18 Aug 06)
===========
- added an optional timeout parameter for the socket connect function i.e.:
  $socket = connect("host", port, [timeout in milliseconds]) 
  default is 60 seconds.
- modified listen to create a server socket and bind to the specified port, 
  each call to listen is a call to accept a connection on the specified port.
  to stop listening on the specified port use closef(port number) instead of 
  $handle.
- added a function global to declare a series of variables into the global 
  scope
- added a require strict debug flag, this flag causes a runtime warning to
  be fired whenever a script uses a variable without delcaring it using
  global, local, or this.
- added &debug(mode) allows scripters to programatically set the debug flags
  for their script..  debug with no arguments returns the current debug flags

  levels are:
  1 - show errors: dump all critical script errors as runtime warnings, this
      should never be turned off.
  2 - show warnings: dump all non-critical script exceptions as runtime 
      warnings.  These can be checked for programatically with &checkError
  4 - require strict: dump all first time uses of non-declared variables as
      runtime warnings.  

  any of these flags can be OR'd together i.e.:

  debug(1 | 4); # show all errors and uses of non-declared variables
- when passed an array parameter, &rand will return a random element of the
  array.
- eliminated the use of a busy loop to wait for a timeout within the &wait
  function
- &wait when called on a process will now wait for that process to exit
  and return the exit value of the process.
- added a new function to BridgeUtilities to extract an "iterator" from the
  argument stack, this iterator will be generated if the argument is an array
  or generator function.  This allows certain functions to accept an array
  or generator function interchangeably.
- updated several functions in the sleep utility library to use this new
  iterator extractor mechanism:
  &map, &filter, &copy, &reverse, &reduce, &printAll, &addAll
- fixed a bug where several bridge utility functions were inadvertently 
  causing arrays/hashes to share scalar references with passed in data. 
  &add, &addAll, &array, &filter, &map, &subarray, and &map.

2.1-beta 2  (5 Aug 06)
===========
- added a few more FP-style functions to Sleep:
  &reduce(&closure, @array)
  &search(@array, &closure, [index])
  &filter(@array, &closure)
- added &replaceAt("original", "new", index, [chars to delete]);
- added &mid("string", index, n chars) to extract a substring equivalent to 
  &substr("string", index, index + n chars) 
- exposed the IO Process, File, and Socket using a new method added to 
  IOObject: getSource().  This will allow scripters to query the IO source 
  using HOES if there is some API Sleep does not bridge. (i.e. exit value of a
  process)
- added an API to SleepUtils for building an IO handle scalar from a Java 
  InputStream/OutputStream
- added a debug flag to each script instance.  the options consist of:

  DEBUG_SHOW_ERRORS = 1 - this is the typical behavior that causes a runtime 
     warning to be fired whenever an uncaught exception occurs within a bridge.
  DEBUG_SHOW_WARNINGS = 2 - fires a runtime warning any time an error
     is flagged using flagError() in the script environment.  runtime warnings
     are typically errors a scripter is meant to check for with 
     checkError($error).  
  DEBUG_NONE = 0 - disables all firing of runtime warnings (not recommended)

  Sleep scripts on the command line can run with different debug levels using:
  java -Dsleep.debug=3 -jar sleep.jar filename.sl
- foreach can now iterate over closures..  if a closure is passed to foreach 
  then the closure will be called continuously until a $null is returned.
- added a few functions for performing set type operations on @arrays
  @ removeAll(@a, @b) - modifies @a with the difference of @a - @b
  @ addAll(@a, @b) - modifies @a with the union of @a + @b
  @ retainAll(@a, @b) - modifies @a to contain the intersection of @a and @b
- added methods to SleepUtils to generate a java.util.Map from a Sleep Hash 
  scalar and to generate a java.util.List from a Sleep Array.
- readln in Sleep I/O now returns the empty scalar at the end of the stream
- sleep I/O streams now autoflush on all writes.  this should solve many
  frustrations that the I/O pipeline has occasionally caused scripters.
- added &available($handle) to determine the number of available bytes for a 
  given stream.  also an option is &available($handle, "substring") to 
  determine if the specified "substring" is contained in the data available to
  be read.
- added an extended version of the while loop that continuously evaluates an 
  expression, assigns it to a variable, and executes a block of code so long as
  the specified variable is not null.  example:

  $handle = openf("somefile.txt");
  while $data (readln($handle))
  {
     println("Read: $data");
  } 
- added formatErrors() and printErrors(OutputStream out) functions to the
  YourCodeSucksException class.   should make reporting parser errors less of
  a burden when embedding sleep into applications.

2.1-beta 1  (16 Jun 06)
===========
- fixed the clean target in the sleep build.xml file
- added a continue keyword for flow control of while/for/foreach
  loops.  My arm hath been twisted.
- rewrote the interpreter to use stack frames instead of a single
  environment stack for all temporary calculations...  this could 
  create bugs and needs lots and lots of testing.
- fixed bug related to using a function call within an array/hash 
  index
- added coroutines to the sleep language, this consists of a yield
  keyword (works like return that exits a closure at that point.  
  Next time said closure is called execution resumes at the point
  where you last yielded from.
- did massive reworking of the sleep interpreter to allow for
  coroutines (this had some benefits as well including the ability
  for bridge writers to track bridge data by script context).
- oops, fixed broken ^ operator (bridge was written wrong, thanks
  to Ralph Becker for catching this one).
- remove() with no parameters will remove the current array element
  in a foreach loop (this only works on arrays, not hashes).
- fixed bugs with iswm algorithm when wildcard pattern is longer 
  than the text it is being compared against.
- updated isMatch/hasMatch/matched to use the new context meta
  data feature to keep tracker of matchers (the old way was not
  thread safe)
- for loop initialization and increment terms can now be empty
- added SleepUtils.getScalar(x) for Java shorts and floats
- opted to distribute documentation as HTML instead of PDF...

2.0-release
===========
- added a -version, -v, --version command line switch to see what
  Sleep version you're using :)
- HOES now automatically converts a 1-dimensional Sleep array into
  a Java array for argument matching (of any Object/non-primitive
  type).  This is a potential area of improvement for the future
  if there is enough demand for it...

  Auto casting is also done for int arrays, double arrays, and float
  arrays.  The first element of the array determines the overarching
  type.  More sophisticated casting should be done using the cast
  function (detailed later in this changelog)
- added function &flatten(@array) for flattening a multidimensional
  array into a 1-dimensional array.
- HOES now recognizes a desired short argument and can build a value
  for it...  (the Java primitive type short)
- when an error occurs sleep will now immediately jump out of the
  currently executing block.
- added a &cast(@var, 't', ...) which casts @var into a native java
  array with a type t (b = byte, c = char, i = int, etc..).  
  Any arguments specified represent the dimensions of the array i.e.
  &cast(@var, 'l', 2, 3) casts @var into a 2x3 array of Java longs.
- &sort now throws an IllegalArgumentException if not enough args
  are specified (I've been bitten by accidentally using &sort when
  I really wanted &sorta and friends...)
- added the ability for fork(&closure, ...) to take an initial set
  of values to pass to the forked script environment.  this feature
  comes with a heavy warning, see the docs for more details

2.0-b11
=======
- fixed a fringe case with the Z unpack character
- cleaned up definitions of pack for z/Z/u/U
- made backslash in single quoted strings behave properly:
  \' is a single quotes; \\ is a \; \ otherwise has no meaning

  I hate changes that break compatability with old scripts (especially
  ones I wrote) but the old behavior was a bug, not a feature...
- fixed $1.$2 not working correctly.  the . operator is the only 
  built-in operator that can do without white space...
- replace() function now takes a 4th parameter for the max number of
  occurences to replace...
- added a hasmatch predicate similar to ismatch, notable differences:
  ismatch matches the entire string against the pattern

  hasmatch looks for a matching substring, each subsequent call to
  hasmatch will look for the next substring until no matches are
  left to be found (in which case it resets itself after returning
  false).   hasmatch is essentially the same as the g option in
  Perl's regex stuff...
- updated the matches() function to work a lot like hasmatch where
  it will look for substrings and return all groupings for all
  matching substrings...  
- added a transliteration function &tr ala the UNIX command tr.  
- updated &matches to allow either a range of matching substring 
  groups to be extracted or a single substring group.

2.0-b10
=======
- fixed a bug with primitive values returned by HOES expressions not
  being interpreted as their primitive selves.
- added a function &values(%hash) for extracting all of the values from a 
  scalar hash.
- exposed the PrintWriter/BufferedReader in the IOObject API
- added a check to prevent ls() on a non-existant directory from fireing an 
  exception..
- added uint(n) to convert scalar int n to a scalar long as an unsigned int.
- fixed bug that was supressing HOES syntax errors
- fixed bug with SleepUtils.getScalar(boolean) always returning a false 
  boolean, thanks to Ralph Becker for finding and isolating the fix for this.
- fixed a bug with pack() packing creating the byte string the wrong way 
- fixed bug with z/Z formats only grabbing one character of a string from the 
  IO stream if no max string size is specified.
- changed the u format and added a U format.. u/U reads/writes 16 bit UTF-16
  characters similar to how z/Z handles 8 bit ASCII characters.
- bwrite and writeb now automatically flush the data after writing everything
- added &wait($handle, [timeout]) to wait for a fork or callback associated
  with $handle to finish.  If the specified timeout is reached the function
  will return the empty scalar.  If $handle is a fork, the return value of the 
  fork will be returned by &wait.
- added a whole slew of mathematical functions bridgeing most of java.lang.Math 
  into Sleep.

2.0-b9 
======
- foreach loops now automatically convert hash parameters into their keyset.
- added a new foreach syntax:

  foreach $index => $value (source) { }

  in this case sleep will assign the index of the source (whether a number for
  an array or a string for a hash) and the value as well.
- sleep console now catches uncaught exceptions with evaluated expressions
- redid the parsing for number literals to rely on Java's methods for doing s
  so.  this means integer/long literals can now be specified in hex, decimal,
  and octal formats.  Octal is indicated with a 0 (digit zero) following the
  number.  Hex is indicated with 0x followed by the hex digits.  Anything
  else is decimal.  Any of these formats can be signed.  Also any of these
  formats can be followed by an L to specify a long scalar rather than an
  int.
- the remove() function now takes multiple parameters for multiple items to 
  remove.
- added callback parameters for &listen() and &connect().  this will allow 
  sleep to call a function when a connection is established or failed for
  either of these functions.
- fixed a deadlock condition caused by calling closef() on a socket from 
  a thread other than the read thread. 
- added fork(&closure) to spin &closure off in its own thread.  &closure 
  is run in an isolated environment.  communication between the main environment
  and the &closure environment is facilitated by a IO pipe returned by fork()
  and available as $source within &closure().
- added sleep(n) to cause the current thread to sleep for n milliseconds
- removed the "script" variable scope.  this was necessary to make the 
  forked isolated script environments a reality.  
- HOES now sets all fields accessible property to true before invocation

2.0-b8
======
- fixed a bug parsing tuple assignments in certain cases.
- added a &subarray(@array, n, [m]) function for extracting an array slice
- reworked the pack/unpack format strings to make them more useful, noteable
  changes include:
  s/S | are for short/unsigned short respectively
  I   | will now read in an unsigned integer
  z/Z | are for reading/writing ascii characters, Z will make sure the 
      | specified field length is used to its fullest.
  u   | is for reading a UTF-8 format string
- rewrote sleep's interactive console to hopefully be a little more useful
- fixed a bug with the pack/unpack format string parser not assigning the 
  specified integer to the last format character.

2.0-b7
======
- array index operator can now be applied to HOES expressions i.e.
  $var = ["this is a string" split: " "][1]
- added error detection for attempting to use foreach loop on a non array value.
- updated &use() to only instantiate dynamically loaded class once other 
  scripts loading this same class will share the instance
- added Evaluation bridge for defining how `backquoted strings` should be 
  processed when encountered in an expression.
- added perl-like cmp operator i.e. "b" cmp "a" returning -1.
- added perl-like spaceship operator i.e. 3 <=> 4.
- fixed a bug with the sort() function and customized sorting functions.  also
  added some javadoc to sleep.interfaces.Function so no one makes the same 
  mistake I did.
- added perl-like map(&closure, @array) function
- altered &use's method signature:
  use(["/path-to/jar-file/to/load/class/from.jar"], "my.package.LoadableClass");
  the jar parameter is optional.
- the x format char in i/o outputs a null byte (in write situations)
- strings can no longer be faked as function literals to a HOES expression i.e.:
  ['&some_func' message: arg1, arg2, ...] no longer works...

  this created a dangerous situation where a string object passed to a HOES 
  expression would be interpreted as a function handle first and foremost 
  whenever the string object began with an &.
- added function('&string') to return a real function handle for the passed in
  &string.
- code parsed with eval() and expr() is no longer cached, if one wants 
  performance similar to cached eval and expr then use compile_closure instead.

  this decision was made to prevent inadvertent memory leaks from scripts that
  do a lot of eval() and expr().
- added compile_closure('string of code') which compiles the string into an 
  anonymous function ready for your use.
- checkError($message) now reports syntax errors for compile_closure, expr, and
  eval.
- YourCodeSucksException's toString() and getMessage() have been made much more
  informative.

2.0-b6
======
- HOES new keyword now runs the returned object through the sleep
  build scalar method.
- made -isnumber friendly to the decimal place indicator .
- fixed a bug with using the index operator on the left hand side
  of any sleep expression (told you to expect bugs last beta!)
- arrays returned by a HOES expression are now converted to sleep
  scalar arrays.

2.0-b5
======
- added -isarray and -ishash predicates.
- added support for multi-dimensional data structure accesses
  to sleep.   i.e.:  @array[3][4] = "hi"; 
- index operator can now be applied to function calls, expressions
  and $scalar's that contain/return an array or hash reference.

  these changes required some massive work on the parser and a
  little bit of work on how the instructions for these things
  are organized.  things are passing my unit tests right now
  but still expect bugs!

- added the option of specifying integers as a hex literal and
  the option of appending L to a number to specify a long.

  $x = 0xFFFFFF;
  $l = 4847324738247832L;

- fixed infinite loop caused by calling strrep with an empty
  string to search for.
- fixed &size and &keys causing a NPE when their passed parameters
  don't contain the appropriate data structure.
- sorting functions will now copy read-only arrays before attempting
  to in-place sort them.  
- iswm predicate is now tolerant of empty strings
- fixed iswm to not consider a left hand side substring to be a valid
  match of the right hand string.  basically the whole left hand side
  string has to be consumed for a valid match to take place.
- added the \ character to iswm patterns to allow the next character
  to have no meaning...
- added ** to iswm to enable greedy matching instead of non-greedy
- meaning of ** and * in iswm now means match 0 or more characters

2.0-b4
======
- added new functions for dealing with binary data in sleep:
  $ pack('format', arg1, arg2, ...)
  $ pack('format', @array)
  @ unpack('format', "string of binary data")
  
  $ readb($handle, n bytes to read)
    writeb($handle, "string of binary data")

  @ bread($handle, 'format')
    bwrite($handle, 'format', arg1, arg2, ...)
    bwrite($handle, 'format', @array)

    the read function can now also take a optional last parameter
    specifying the number of bytes to read on each call to the 
    closure.  a 3rd parameter of 0 means read whole lines of text
    as normal.

  the format string is specified in the Sleep Language Reference.

  As a warning the performance of these functions isn't the greatest
  in the world.  It took 3 seconds to read in sleep.jar and another
  4 to write it back out.  Ah well at least it didn't corrupt the jar
  file :)
- added i/o stream manipulation functions such as:

  skip(n)   - skips n bytes in the file stream
  mark([n]) - sets a mark in the buffer to reset to
  reset()   - resets this stream to the last mark

- added logical operators to sleep such as:
  ^, |, &, <<, >>, and a not() function
- values returned from  HOES will now (usually) map to
  the appropriate sleep scalar type.  
- exposed the Sleep IO primitives (contained in a Sleep
  Object Scalar) as public API's.  I still have yet to
  document it well.

2.0-b3
======
- fixed bug when referring to class names using the dotted 
  noation.
- added => operator to help with instantiating hashmaps, i.e.
  hash(a => 3 + (9 / 3), b => "this is a string", ...)

  a key/value pair object scalar is created by using the =>
  operator.  This scalar can be extracted using the 
  BridgeUtilities class.
- added an "is" predicate for checking object equivalency, 
  is works just like == for checking object reference 
  equivalence in Java.  i.e. if ($x is $y) { }
- added closures to sleep...   See the Sleep language reference 
  for more information
- added two new variable scopes, a script specific variable
  scope and a closure specific scope.  Variables can be placed
  into thse scopes using the &this, and &module functions.
- exception message trapping mechanism for HOES has been
  improved.

2.0-b2
======
- compressed the included PDF documentation
- rewrote the HOES argument resolution to be better(? :))
- added more detailed error messages to the HOES interface i.e. 
  badly matched arguments will show a useful message
- exceptions thrown in the HOES interface will now be accessible 
  with the checkError($scalar) method.  
- stack traces of exceptions thrown by HOES accesses will now be
   printed to the console.
- fixed a bug with importing single classnames from a Package.

^-- These fixes resolve issues with HOES and Java 1.5.0

2.0-b1 (13 Mar 05)
======
- Added experimental Haphazard Object Extensions for Sleep (HOES)
  interface.  

  HOES allows Sleep to access and create Java objects.  This adds 
  a whole new dimension to what is possible with Sleep scripts.

  However Sleep is a language meant to provide an easy to learn
  abstraction of an application's API.  HOES can supplement
  extensions/abstractions not yet provided however it should not
  be solely relied on to provide a solid scripting interface for
  an application.

  For more information see the Sleep Scripting Language document.
  http://sleep.hick.org/sleeplang.html#10

28 Feb 05
=========
- fixed bone headed bug with for loop initialization terms.
  simple stuff like for ($x = 0; ...) worked fine, stuff like
  $x = 1 + 2 turned out to be broken.  Fixed.
- added a new type of syntax, a "filtered environment", 
  essentially an environment that can take a scalar filter
- default hashtables now filter out all keys with null scalar
  values when returning a key set.  
- fixed -isnumber and -isletter to return false if the parameter
  strings are equal to ""
- added $handle = listen(port, [timeout]) function to IO bridge.
  sets up a really simple server socket.
- removed useless debug flag for traceing runtime steps.  
- added an API for getting the approximate line number of a 
  Block Object...
- added (optional) global parsed script cache'ing mechanism.  
  useful for applications with multiple script loaders that
  will be loading the same script files.  
- stack frames for temporary calculations are now contained in the
  ScriptEnvironment rather than being instantiated for each atomic
  step that would need them.  This saves some memory overall and
  eliminates all runtime information from the Block/Step objects.
- fixed race conditions in the Sleep parser
- rewrote sleep predicate parser to be much more friendly with
  right hand side expressions that are not grouped by parentheses.

18 Dec 04
=========
- updated one of the SleepUtils.runCode() functions to return
  type of Scalar instead of void.
- added a convienence method to get the first script environment
  out of the script loader
- registered sleep operators that have names that could be mistaken
  for functions with the sleep parser.  this lack of registration
  created an ambiguous case such as:
 
  $var = "hello" x (3 + 4);
  
  is x (3 + 4) a function call, or is it an operator?  oh well :)
  updated documentation to reflect this requirement as well. 
- fixed a little 'documentation' bug with ParserConfig having the
  wrong package name.
- added a &use("package.SomeBridge") which will attempt to dynamically
  load the class package.SomeBridge as a Loadable object and install it
  into the environment of the current script.  takes either a pathname
  without the .class extension or a package name for something already
  in the class path.

25 Nov 04
=========
- fixed bug with return not working inside of loops.
- made print/println functions able to handle no parameters
- added a 'break' command for breaking out of the current 
  loop.  
- added a iff(condition, value_true, value_false) operator
- added &checkError([$scalar]) which will return the last error
  to occur since checkError was last called.  Right now it
- process, file, and socket i/o now all flag an error if an
  error occurs when executing, opening, or connecting.  error
  is accessible via checkError([$scalar])
- command line sleep, using java -jar sleep.jar now puts all
  arguments in the array @ARGV.  
- scalar string number conversion now does a straight conversion
  failing if the string is not a number.  functions like
  &long($scalar), &double($scalar), &int($scalar) now convert a 
  string directly to those types rather than to an int and then
  casting as the specified type.
- moved over &parseDate(), &formatDate(), and &ticks() from jIRCii
  about time sleep had some date processing tools...
- built-in operator ! now works on expressions and scalar values
  in an if statement.  i.e. if (!$1) { }  don't use it on 
  predicate expressions or you will get a lot of runtime warning
  errors... :)
- added &printAll($handle, @array) for printing the entire 
  contents of the specified array to a file.

14 Nov  04
==========
- added sendEOF($handle) function for signaling end of file to a 
  i/o output stream.
- added an option to ScriptLoader to load script information raw
  with no character set conversion.  
- added formatNumber(number, base) for formatting the passed in
  number to a certain base system i.e. 2 (binary), 10 (decimal), 16 (hex)
- added parseNumber("number", base) to parse a number string encoded
  as a certain base system into a scalar long
- Updated &clear(@array/%hash) to clear hashes as well
- sleep.jar now has a manifest file so you can java -jar sleep.jar to
  start the sleep console.
- added &hash('key=value', 'user=password') to generate a hashtable
- updated getFileProper("parent", "child", ...) to take any number of
  parameters and string them into a properly formatted pathname
- fixed a parser bug: not detecting a missing ; in return statement
  expressions...  led to all kinds of problems later
- updated command line options to execute a script if that is all
  that is specified on the command line i.e.

  java -jar sleep.jar myscript.sl
- IO related bridges updated to handle '/' as a universal path 
  separator regardless of what platform you are on.
- spent a lot of time updating the JavaDoc for the Sleep API.  The
  JavaDoc should now be a useful resource.  :)

26 Sept 04
==========
- unbroke sleep function &clear().
- added a &copy(@array) function to sleep which returns a copy of the 
  given array and copies of all of its values.
- added an "x" string operator i.e. $var = "abc" x 3; # $var is now 
  "abcabcabc"
- added an expr('expression code'); function
- documented and updated eval('code;'); function
- added \r, \n, and \t escape constants to sleep
- added normal array @_ to subroutines, which contains all of the 
  arguments passed to the subroutine.
- added getFileProper("/parent-path/, "file") - returns the appropriate 
  filename/path string for parent-path and file for the current operating 
  system.
- fixed a problem with the sleep return stack, return by itself will now 
  by default return $null - ALWAYS! 
- added some sugar for assigning values from an array to a tuple of 
  scalars i.e. ($x, $y, $z) = @array;  $x will be the first element of 
  @array, $y will be the second element, and $z will be the third 
  element.
- removed white space requirement for the string concatenation operator .
- added a strrep("string", "old", "new", ..., ...) for straight up string 
  replacement without the regex bs in replace()

20 Mar 04 - Initial Release, Take II

06 Apr 02 - Initial Release? :)
