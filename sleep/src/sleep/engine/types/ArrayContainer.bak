package sleep.engine.types;

import sleep.runtime.*;
import java.util.*;

public class ArrayContainer implements ScalarArray
{
   protected LinkedList values;

   public ArrayContainer()
   {
      values = new LinkedList();
   }

   /** initial values must be a collection of Scalar's */
   public ArrayContainer(Collection initialValues)
   {
      values = new LinkedList(initialValues);
   }

   public Scalar pop()
   {
      return (Scalar)values.removeFirst();
   }

   public Scalar push(Scalar value)
   {
      values.addFirst(value);
      return value;
   }

   public int size()
   {
      return values.size();
   }

   public Scalar getAt(int index)
   {
      if (index >= values.size())
      {
         return expand(index, SleepUtils.getEmptyScalar());
      }

      return (Scalar)values.get(index);
   }

   private Scalar expand(int index, Scalar value)
   {
      for (int x = values.size(); x < index; x++)
      {
         values.add(SleepUtils.getEmptyScalar());
      }

      values.add(value);

      return (Scalar)value;
   }

   public Scalar setAt(int index, Scalar value)
   {
      if (index >= values.size())
      {
         return expand(index, value);
      }

      return (Scalar)values.set(index, value);
   }

   public Iterator scalarIterator()
   {
      return values.listIterator();
   }

   public void add(Scalar value)
   {
      values.add(value);
   }
}
